CPU Manual.

Section A: General Information

    File extension: .fsm ( Assembly )
    File extension: .fo ( Compiled Assembly )
    File extension: .fl ( High Level Language )
    File extension: .flo ( Compliled )

    Some units are in Kibibytes. A Kibibyte is 1024 bytes, unlike a Kilobyte which is 1000.

    

Section B: Memory

    The CPU has 12 Memory locations.

    Section B1: Main Memory

        The RAM. Size: 64 KiB ( Kibibytes, 64*1024 Bytes )

            0x10000 .. 0x10400 (0-1 KiB) : System RAM, Video RAM
            0x10400 .. 0x10800 (1-2 KiB) : Special RAM, Purpose: TBD
            0x10800 .. 0x1FFFF (2-64 KiB) : General Purpose RAM for variables, and other things

            Note: All RAM locations are prefixed with a '1' in hex to distinguish. This does not mean it has 16x more space.

        The ROM. Size: 1 KiB ( Kibibytes, 1024 bytes, system only )

    Section B2: Registers

        The CPU has 8 general purpose registers: 
            rag: 64-bit; Operand Reference ID: 0x0
            rbg: 64-bit; Operand Reference ID: 0x1
            rcg: 64-bit; Operand Reference ID: 0x2
            rag: 64-bit; Operand Reference ID: 0x3
            rdg: 64-bit; Operand Reference ID: 0x4
            reg: 64-bit; Operand Reference ID: 0x5
            rfg: 64-bit; Operand Reference ID: 0x6
            rgg: 64-bit; Operand Reference ID: 0x7
            rhg: 64-bit; Operand Reference ID: 0x8

        The CPU also has the 2 special registers:
            ACC: Accumulator (32-b0it); Operand Reference ID: 0xA
            PCT: Program Counter (1 16-bit integer) (READ-ONLY); Operand Reference ID: 0xB


    EACH VARIABLE TAKES UP 4 BYTES, AND IS 32 BITS (Standard)
        

Section C: Assembly Language

    Section C1: Insturctions

        0x00: void NINS {args: None} ~ No instruction
        0x01: int ADDI {args: int, int, RegisterToStore} ~ Add ints
        0x02: float ADDF {args: float, float, RegisterToStore} ~ Add floats
        0x03: bool AND {args: bool A, bool B, RegisterToStore} ~ Logical AND
        0x04: void FUNC {args: returnType, Name}
        0x05: void CALL {args: char[] funcName} ~ Call function
        0x06: void CMDR {args: None} ~ Clear Memory Data Register
        0x07: void CMAR {args: None} ~ Clears Memory Address Register
        0x08: void CAC {args: None}  ~ Clears Accumulator
        0x09: void CRAM {args: None} ~ Clears all RAM ( Not recommended, shuts down program )
        0x0A: void RPC {args: None} ~ Reset program counter
        0x0B: void CGR {args: Register} ~ Clears the specified General Purpose Register
        0x0C: bool EQL {args: bool A, bool B, RegisterToStore} ~ Checks if A==B
        0x0D: bool LST {args: bool A, bool B, RegisterToStore} ~ Checks if A<B
        0x0E: bool GRT {args: bool A, bool B, RegisterToStore} ~ Checks if A>B
        0x0F: bool LSTE {args: bool A, bool B, RegisterToStore} ~ Checks if A<=B
        0x10: bool GRTE {args: bool A, bool B, RegisterToStore} ~ Checks if A>=B
        0x11: void HLT {args: None} ~ Halts the clock
        0x12: void RSC {args: None} ~ Stops clock Halt
        0x13: void SET {args: %variable, value} ~ Assigns variable with the value
        0x14: void JUMP {args: int lineNum} ~ Jumps to line
        0x15: void JMPIZ {args: mathExpression, line num} ~ Jumps to line if the math expression is 0
        0x16: void OUT {args: registerWithStringAddresses} ~ stdout (string)
        0x17: string INP {args: RegisterToStore} ~ stdin 
        0x18: void MOV {args: RegisterOrData1, Register2} ~ Moves data to register
        0x19: void VBL {args: type, name, value, address, bool nullable} ~ Creates variable
        0x1A: void ASG {args: value, address} ~ Assigns the value to &ptr

    Section C2: Libraries

        <math.fsm> : FILE <Assembly\STDLIB\math.fsm>
        <string.fsm> : FILE <Assembly\STDLIB\string.fsm>
        <memory.fsm> : FILE <Assembly\STDLIB\memory.fsm>
        <loops.fsm> : FILE <Assembly\STDLIB\loops.fsp>

        Note: The libraries are not yet meant to work and are not made, however later they will all be merged into the main instruction set

    Section C3: Operators

        '&' : Address of something
        '*' : Pointer to something
        '=' : Assignment

    Section C4: Syntax

        Comments are declared with a '~'
        Variables are referenced with a '%'
        Lines do not have end in a ';', but rather a line feed character ('\n')

        Example code to swap to integers, NumA, NumB: See FILE: <AssemblyExample.fsm>

    Section C5: Data Types

        char ~ Character
        int ~ Integer
        float ~ Floating Point Number (Decimal)
        bool ~ Boolean
        ptr ~ Pointer

    Section C6: Code examples

        Example code to swap 2 integers and print them: FILE <Examples\Assembly\AssemblyExample.fo>

Section D: High level language 

    ~ TODO ~

Section E: Character set

    0x00 : ' '
    0x01 : 'a'
    0x02 : 'b'
    0x03 : 'c'
    0x04 : 'd'
    0x05 : 'e'
    0x06 : 'f'
    0x07 : 'g'
    0x08 : 'h'
    0x09 : 'i'
    0x0A : 'j'
    0x0B : 'k'
    0x0C : 'l'
    0x0D : 'm'
    0x0E : 'n'
    0x0F : 'o'
    0x10 : 'p'
    0x11 : 'q'
    0x12 : 'r'
    0x13 : 's'
    0x14 : 't'
    0x15 : 'u'
    0x16 : 'v'
    0x17 : 'w'
    0x18 : 'x'
    0x19 : 'y'
    0x1A : 'z'
    0x1B : 'A'
    0x1C : 'B'
    0x1D : 'C'
    0x1E : 'D'
    0x1F : 'E'
    0x20 : 'F'
    0x21 : 'G'
    0x22 : 'H'
    0x23 : 'I'
    0x24 : 'J'
    0x25 : 'K'
    0x26 : 'L'
    0x27 : 'M'
    0x28 : 'N'
    0x29 : 'O'
    0x2A : 'P'
    0x2B : 'Q'
    0x2C : 'R'
    0x2D : 'S'
    0x2E : 'T'
    0x2F : 'U'
    0x30 : 'V'
    0x31 : 'W'
    0x32 : 'X'
    0x33 : 'Y'
    0x34 : 'Z'
    0x35 : '\0'
    0x36 : '\n'
    0x37 : ':'
    0x38 : ';'
    0x39 : '<'
    0x3A : '>'
    0x3B : '='
    0x3C : '?'
    0x3D : '!'
    0x3E : '~'
    0x3F : '['
    0x40 : ']'
    0x41 : '{'
    0x42 : '}'
    0x43 : '('
    0x44 : ')'
    0x45 : '-'
    0x46 : '+'
    0x47 : '*'
    0x48 : '^'
    0x49 : '&'
    0x4A : '/'
    0x4B : '\'
    0x4C : '1'  
    0x4D : '2'
    0x4E : '3'
    0x4F : '4'
    0x50 : '5'
    0x51 : '6'
    0x52 : '7'
    0x53 : '8'
    0x54 : '9'
    0x55 : '0'
    0x56 : '#'
    0x57 : '$'
    0x58 : '%'
    0x59 : '\''
    0x5A : '\"'
    0x5B : '.'
    0x5C : ','
    0x5D : '_'
    0x5E : '='
    0x5F : '|'
    0x60 : '@'
    0x61 : '{StartOfText}'
    0x62 : '{EndOfLine}'


Section F: Data type prefixes (Compiled Code Only):

    char: 
        This is stored with a prefix of 1:
            0x1{value}
    memoryLocator:
        This is stored with a prefix of 2:
            0x2{value}
    bool:
        This has 2 values, and has a prefix of 3:
            0x30
            0x31
    int: 
        This is stored with a prefix of 4:
            0x4{value}
    float:
         This is stored with the prefix of 5:
            0x5{val1}.{val2} where both values have 2 nibbles each
    ptr: 
        This is stored with a prefix of 6:
            0x6{value}
    register:
        This is stored with a prefix of 7:
            0x7{value}
    ptr (register):
        This is stored with a prefix of 8:
            0x8{value}
    {command}: 
        This is written with a prefix of C for the code runner:
            0xC{value}
    
    THE END OF LINE CHARACTER IS DOES NOT NEED START OF TEXT CHARACTER